// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/Dorrrke/library0706/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// BorrowBook provides a mock function with given fields: bid, uid
func (_m *Repository) BorrowBook(bid string, uid string) error {
	ret := _m.Called(bid, uid)

	if len(ret) == 0 {
		panic("no return value specified for BorrowBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(bid, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckRefreshToken provides a mock function with given fields: tokenID
func (_m *Repository) CheckRefreshToken(tokenID string) (bool, error) {
	ret := _m.Called(tokenID)

	if len(ret) == 0 {
		panic("no return value specified for CheckRefreshToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(tokenID)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(tokenID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBook provides a mock function with given fields: bid
func (_m *Repository) GetBook(bid string) (models.Book, error) {
	ret := _m.Called(bid)

	if len(ret) == 0 {
		panic("no return value specified for GetBook")
	}

	var r0 models.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Book, error)); ok {
		return rf(bid)
	}
	if rf, ok := ret.Get(0).(func(string) models.Book); ok {
		r0 = rf(bid)
	} else {
		r0 = ret.Get(0).(models.Book)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooksList provides a mock function with no fields
func (_m *Repository) GetBooksList() ([]models.Book, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBooksList")
	}

	var r0 []models.Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: email
func (_m *Repository) GetUser(email string) (models.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReturnBook provides a mock function with given fields: bid, uid
func (_m *Repository) ReturnBook(bid string, uid string) error {
	ret := _m.Called(bid, uid)

	if len(ret) == 0 {
		panic("no return value specified for ReturnBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(bid, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveBook provides a mock function with given fields: book
func (_m *Repository) SaveBook(book models.Book) error {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for SaveBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveBooks provides a mock function with given fields: _a0
func (_m *Repository) SaveBooks(_a0 []models.Book) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveBooks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Book) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRefreshToken provides a mock function with given fields: refreshToken, tokenID, userID
func (_m *Repository) SaveRefreshToken(refreshToken string, tokenID string, userID string) error {
	ret := _m.Called(refreshToken, tokenID, userID)

	if len(ret) == 0 {
		panic("no return value specified for SaveRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(refreshToken, tokenID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: user
func (_m *Repository) SaveUser(user models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
